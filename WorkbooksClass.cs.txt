// WORKBOOKCLASS.CS
using System;
using System.IO;
using System.Windows.Forms;
using Excel = Microsoft.Office.Interop.Excel;

namespace AddInVSTO
{
    public class WorkbooksClass
    {
        private readonly Excel.Application _excelApp;
        private readonly UserCustomRibbon _ribbon;

        public WorkbooksClass(Excel.Application excelApp, UserCustomRibbon ribbon)
        {
            _excelApp = excelApp;
            _ribbon = ribbon;
        }

        // Метод для обработки выбора каталога
        public string HandleDirectoryOption()
        {
            string selectedPath = string.Empty;

            if (_ribbon.IsSpecifyDirectory)
            {
                switch (_ribbon.SelectedDirectoryOption)
                {
                    case "Всегда выбирать":
                        selectedPath = SelectFolder();
                        break;
                    case "Новый каталог":
                        selectedPath = Path.Combine(GlobalParameters.StoragePath, "НовыйКаталог");
                        CreateDirectory(selectedPath);
                        break;
                    case "Текущий каталог":
                        if (_excelApp.ActiveWorkbook != null)
                        {
                            selectedPath = Path.GetDirectoryName(_excelApp.ActiveWorkbook.FullName);
                        }
                        break;
                    case "Каталог документу":
                        selectedPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Excel");
                        if (!Directory.Exists(selectedPath))
                        {
                            CreateDirectory(selectedPath);
                        }
                        break;
                    case "Каталог загрузки":
                        selectedPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
                        break;
                    case "Пользовательский":
                        selectedPath = GlobalParameters.CustomDirectory;
                        break;
                    default:
                        selectedPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Excel");
                        break;
                }
            }
            else
            {
                // Если чекбокс не активен, используем папку "Документы"
                selectedPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Excel");
            }

            return selectedPath;
        }

        // Метод выбора папки пользователем
        private string SelectFolder()
        {
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                DialogResult result = folderDialog.ShowDialog();
                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(folderDialog.SelectedPath))
                {
                    return folderDialog.SelectedPath;
                }
            }
            return string.Empty;
        }

        // Метод создания директории
        private void CreateDirectory(string path)
        {
            try
            {
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка создания папки: {ex.Message}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Пример обновленного метода создания книги
        public void CreateWorkbook()
        {
            string directoryPath = HandleDirectoryOption();

            if (_ribbon.IsSpecifyDirectory && _ribbon.SelectedDirectoryOption == "Всегда выбирать")
            {
                if (string.IsNullOrEmpty(directoryPath))
                {
                    // Пользователь отменил выбор каталога
                    return;
                }
            }

            try
            {
                // Создаем новую книгу
                Excel.Workbook newWorkbook = _excelApp.Workbooks.Add();
                string workbookPath = Path.Combine(directoryPath, $"НоваяКнига_{DateTime.Now:yyyyMMddHHmmss}.xlsx");
                newWorkbook.SaveAs(workbookPath);
                MessageBox.Show($"Новая книга создана: {workbookPath}", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при создании книги: {ex.Message}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                // Освобождаем ресурсы
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }
        }

        // Пример обновленного метода удаления книги
        public void DeleteWorkbook()
        {
            if (_excelApp == null || _excelApp.ActiveWorkbook == null)
            {
                System.Diagnostics.Debug.WriteLine("Нет активной книги для удаления.");
                return;
            }

            string directoryPath = HandleDirectoryOption();

            if (_ribbon.IsSpecifyDirectory && _ribbon.SelectedDirectoryOption == "Всегда выбирать")
            {
                if (string.IsNullOrEmpty(directoryPath))
                {
                    // Пользователь отменил выбор каталога
                    return;
                }
            }

            try
            {
                Excel.Workbook activeWorkbook = _excelApp.ActiveWorkbook;
                string workbookName = activeWorkbook.Name;
                string workbookPath = activeWorkbook.FullName;

                var result = MessageBox.Show(
                    $"Вы уверены, что хотите удалить книгу {workbookName}?",
                    "Удаление книги",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning
                );

                if (result == DialogResult.Yes)
                {
                    activeWorkbook.Close(SaveChanges: false);
                    if (File.Exists(workbookPath))
                    {
                        File.Delete(workbookPath);
                        MessageBox.Show($"Книга {workbookName} удалена.", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Ошибка при удалении книги: {ex.Message}",
                    "Ошибка",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error
                );
                System.Diagnostics.Debug.WriteLine("Ошибка при удалении книги: " + ex.Message);
            }
        }

        // Пример обновленного метода закрытия книги
        public void CloseWorkbook()
        {
            if (_excelApp == null || _excelApp.ActiveWorkbook == null)
            {
                System.Diagnostics.Debug.WriteLine("Нет активной книги для закрытия.");
                return;
            }

            string directoryPath = HandleDirectoryOption();

            if (_ribbon.IsSpecifyDirectory && _ribbon.SelectedDirectoryOption == "Всегда выбирать")
            {
                if (string.IsNullOrEmpty(directoryPath))
                {
                    // Пользователь отменил выбор каталога
                    return;
                }
            }

            try
            {
                Excel.Workbook activeWorkbook = _excelApp.ActiveWorkbook;
                string workbookName = activeWorkbook.Name;

                if (!activeWorkbook.Saved)
                {
                    var saveResult = MessageBox.Show(
                        $"Сохранить изменения в книге {workbookName}?",
                        "Сохранение изменений",
                        MessageBoxButtons.YesNoCancel,
                        MessageBoxIcon.Question
                    );

                    if (saveResult == DialogResult.Cancel)
                    {
                        return;
                    }

                    if (saveResult == DialogResult.Yes)
                    {
                        if (string.IsNullOrEmpty(activeWorkbook.Path))
                        {
                            activeWorkbook.SaveAs(Path.Combine(HandleDirectoryOption(), workbookName));
                        }
                        else
                        {
                            try
                            {
                                // Создаем резервную копию
                                string backupPath = Path.Combine(
                                    Path.GetTempPath(),
                                    $"{Path.GetFileNameWithoutExtension(workbookName)}_backup_{DateTime.Now:yyyyMMddHHmmss}{Path.GetExtension(workbookName)}"
                                );
                                activeWorkbook.SaveCopyAs(backupPath);
                                System.Diagnostics.Debug.WriteLine($"Резервная копия создана: {backupPath}");

                                // Сохраняем основной файл
                                activeWorkbook.Save();
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(
                                    $"Ошибка при создании резервной копии: {ex.Message}\nФайл будет сохранен без резервной копии.",
                                    "Предупреждение",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Warning
                                );
                                activeWorkbook.Save();
                            }
                        }
                    }
                }

                activeWorkbook.Close(SaveChanges: false);
                MessageBox.Show($"Книга {workbookName} закрыта.", "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show(
                    $"Ошибка при закрытии книги: {ex.Message}",
                    "Ошибка",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error
                );
                System.Diagnostics.Debug.WriteLine("Ошибка при закрытии книги: " + ex.Message);
            }
        }

        // Дополнительные методы создания, копирования и т.д. должны быть обновлены аналогично.
    }
}